enum modbusProtocol
	modbus_TCP=0,
	modbus_RTU=1
end enum

type modbus_reqhdr
	func_code as byte
	address as word
	count as word
end type

type modbus_req
	addr as byte
	hdr as modbus_reqhdr
	crc as word
end type

#IFNDEF MODBUS_SLAVE_ENABLED
	#define MODBUS_SLAVE_ENABLED 0
#ENDIF

' Read Input Registers
#define MODBUS_ADC_INPUT_REGISTER_HEX 0
#define MODBUS_ADC_INPUT_REGISTER_FLOAT 100
#define MODBUS_COUNTER_INPUT_REGISTER 200
#define MODBUS_BP_LIST_PORT1_INPUT_REGISTER 300
#define MODBUS_BP_LIST_PORT2_INPUT_REGISTER 450
#define MODBUS_BP_LIST_PORT3_INPUT_REGISTER 600
#define MODBUS_BP_LIST_PORT4_INPUT_REGISTER 750

#define MB_RQ_SIZE sizeof(modbus_req)
#define MODBUS_DAC_HOLDING_REGISTER 0
#define MODBUS_PWM_PULSE_HOLDING_REGISTER 100
#define MODBUS_PWM_PERIOD_HOLDING_REGISTER 200
#ifndef MODBUS_TIMEOUT
	#define MODBUS_TIMEOUT 500
#endif
#ifndef MODBUS_MAX_REQUESTS
	#define MODBUS_MAX_REQUESTS 20
#endif
#ifndef MODBUS_DEBUG_PRINT
	#define MODBUS_DEBUG_PRINT 0
#endif
#ifndef MODBUS_FRAME_DELAY_MS
	#define MODBUS_FRAME_DELAY_MS 10
#endif

enum modbusFunc
	ReadCoilStatus = 1,
	ReadInputStatus = 2,
	ReadHoldingRegisters = 3,
	ReadInputRegisters = 4,
	WriteSingleCoil = 5,
	PresetSingleRegister = 6,
	WriteMultipleCoils = 15,
	PresetMultipleRegisters = 16
end enum

enum modbusDataType
	modbus_float=0,
	modbus_signed=1,
	modbus_unsigned=2
end enum

enum modbusEndianness
	modbus_big=0,
	modbus_little=1
end enum

type modbus_request_item
	timestamp as dword
	device_id as byte
	request_function as byte
	data as string(10)
	start_register as word
	count as word
	interface_number as byte
	protocol as modbusProtocol
	transactionId as word
end type

declare modbus_queue_start as char
declare modbus_queue_end as char
declare modbus_awaiting_reply as boolean
declare modbus_request_queue as modbus_request_item(MODBUS_MAX_REQUESTS)
declare modbus_recv_buffer as string
#IF MODBUS_SLAVE_ENABLED
declare modbus_slave_recv_buffer as string
declare modbus_slave_id as byte
declare modbus_slave_protocol as modbusProtocol
declare modbus_slave_interface as byte
#ENDIF

declare function modbus_initialize() as boolean
declare function modbus_callback_ReadCoilStatus(address as word) as boolean
declare function modbus_callback_ReadInputStatus(address as word) as boolean
declare function modbus_callback_WriteSingleCoil(address as word, value as low_high) as byte 
declare function modbus_callback_ReadHoldingRegister(address as word) as word
declare function modbus_callback_ReadInputRegister(address as word) as word
declare function modbus_callback_set_holding_register(address as word, data as word) as boolean
declare function modbus_read_word(byref bytes as byte(255), start as byte) as word
declare function modbus_queue_get_count() as byte
declare function modbus_crc16(data as byte(255), byte_cnt as byte) as word
declare function modbus_queue_pop() as modbus_request_item
declare function modbus_print_packet(byref s as string) as string
declare sub callback_modbus_slave_reply(byref request_item as modbus_request_item, byref reply as string)
declare sub callback_modbus_slave_reply_timeout(byref request_item as modbus_request_item)

declare sub modbus_master_receive(recv_data as string, protocol as modbusProtocol)
declare sub modbus_slave_receive(byref recv_data as string, interface_number as byte, protocol as modbusProtocol)
declare sub modbus_master_request(devaddr as byte, request as byte, start as word, count as word, regdata as string, interface_number as byte, protocol as modbusProtocol, transactionId as word)
declare sub modbus_queue_clear()
declare sub modbus_proc_timer()
declare sub modbus_proc_ser_data_sent()
declare sub modbus_send(interface_number as byte, protocol as modbusProtocol, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
declare sub modbus_master_send_next()
declare function modbus_parse_response(byref data as string, data_type as modbusDataType, endianness as modbusEndianness) as float
declare function modbus_request_exists(request_function as byte, device_id as byte, start_register as word, count as word, interface_number as byte, protocol as modbusProtocol) as no_yes
