
include "global.tbh"

dim tbl_web_enabled_tables(TBL_MAX_NUM_TABLES) as string(TBL_MAX_TABLE_NAME_LEN)
dim tbl_web_tbl_status as en_tbl_status_codes
dim tbl_web_fields(TBL_MAX_TOTAL_NUM_FIELDS) as string(TBL_MAX_FIELD_NAME_LEN)

sub tbl_web_start()
	dim i as byte
	for i=0 to TBL_MAX_NUM_TABLES-1
		tbl_web_enabled_tables(i)=""
	next i
end sub

sub tbl_web_set(byref tbl_name as string, tbl_enabled as no_yes)
	dim i as byte
	for i=0 to TBL_MAX_NUM_TABLES-1
		if tbl_enabled=YES and tbl_web_enabled_tables(i)="" then
			tbl_web_enabled_tables(i)=tbl_name
			exit sub
		else if tbl_enabled=NO and tbl_web_enabled_tables(i)=tbl_name then
			tbl_web_enabled_tables(i)=""
			exit sub
		end if
	next i
end sub


sub tbl_web_get_tables(byref selected_type as string)
	dim i,j as byte
	dim table_name as string(TBL_MAX_TABLE_NAME_LEN)
	dim html_tbl as tbl_type
	dim num_of_fld as byte
	dim tbl_rows as word
	dim table_type as string(5)="table"
	dim field_metadata as tbl_field_type
	
	if TBL_MAX_NUM_TABLES=0 then
		exit sub
	end if
	for i=0 to TBL_MAX_NUM_TABLES-1
		if tbl_web_enabled_tables(i)<>"" then
			table_name=tbl_web_enabled_tables(i)
			tbl_web_tbl_status=tbl_select(table_name,table_name)
			if tbl_web_tbl_status=EN_TBL_STATUS_OK then
				if tbl_get_table_info(table_name,html_tbl) = EN_TBL_STATUS_OK then
					if html_tbl.structure = EN_TBL_STRUCT_TABLE then
						table_type="table"
					else
						table_type="log"
					end if
					if selected_type = table_type then
						sock.setdata(table_name+"|")
						sock.setdata(table_type+"|")
						tbl_get_num_records(tbl_rows,NO)
						sock.setdata(str(tbl_rows)+"|")
						'fieldName|rowCount|column1|column2|....\r\n
						num_of_fld = tbl_get_num_fields(table_name)
						for j = 0 to num_of_fld-1
							tbl_get_field_info(table_name,j,field_metadata)
							sock.setdata(field_metadata.field_name+",")
							sock.setdata(chr(field_metadata.field_type)+",")
							sock.setdata(str(field_metadata.p1)+",")
							sock.setdata(str(field_metadata.p2)+",")
							sock.setdata(str(field_metadata.key)+",")
							sock.setdata(str(field_metadata.romaddr_def)+",")
							if field_metadata.field_display_name<>"" then
								sock.setdata(field_metadata.field_display_name+",")
							else
								sock.setdata(field_metadata.field_name+",")
							end if
							dim df as string
							tbl_get_field_def(table_name,field_metadata.field_name,df)
							sock.setdata(df)
							if j<num_of_fld-1 then
								sock.setdata("|")
							end if
							sock.send()
						next j
						sock.setdata("\r\n")
					end if
				end if
			end if
			
		end if
	next i
end sub

sub tbl_web_get_table_active_rows(byref table as string, byref tbl_rows as word, byref tbl_rows_all as word)
	
	dim html_tbl as tbl_type
	
	tbl_select(table, table)
	if tbl_get_table_info(table,html_tbl) = EN_TBL_STATUS_OK then
		tbl_get_num_records(tbl_rows,NO)
        tbl_get_num_records(tbl_rows_all,YES)
    end if
	
end sub

sub tbl_web_get_flds(byref table as string)
	dim j, num_of_fld as byte
	dim field_metadata as tbl_field_type

	
	num_of_fld = tbl_get_num_fields(table)
    for j = 0 to num_of_fld - 1
        tbl_get_field_info(table,j,field_metadata)
        tbl_web_fields(j) = field_metadata.field_name
    next j
	
end sub

function tbl_web_get_header(byref table as string) as string
	dim num_of_fld, i as byte
	
	tbl_web_get_header = "\x22index\x22,"
	
	tbl_web_get_flds(table)
	
	num_of_fld = tbl_get_num_fields(table)
	
	for i = 0 to num_of_fld - 1 
		tbl_web_get_header = tbl_web_get_header + "\x22" + tbl_web_fields(i) + "\x22"
		if i <> num_of_fld - 1 then
			tbl_web_get_header = tbl_web_get_header + ","
		end if 
	next i

    tbl_web_get_header=tbl_web_get_header
end function

function tbl_web_get_fld_data_json(index as word, num_of_fld as byte) as string
	'same as tbl_web_get_fld_data but as json
	dim j, k, x as byte
	dim fld_data as string
	dim tmp_data as string=""
	if num_of_fld=0 then
		tbl_web_get_fld_data_json=""
		exit function
	end if
	tbl_record_sg(index,EN_TBL_GET)
	tmp_data="{\x22index\x22:"+str(index)+","
	for j = 0 to num_of_fld - 1
		tbl_field_sg(tbl_web_fields(j),fld_data,EN_TBL_GET)
		tmp_data=tmp_data+"\x22"+tbl_web_fields(j)+"\x22:"
		'determine if fld_data is a number
		dim fld_info as tbl_field_type
		tbl_get_field_info(tbl_get_table_name(), j, fld_info)
		if fld_info.field_type=EN_TBL_FIELD_STRING then
			fld_data="\x22"+escape_string(fld_data)+"\x22"
		end if
		tmp_data=tmp_data+fld_data
		if j<num_of_fld - 1 then
			tmp_data=tmp_data+","
		end if
	next j
	tmp_data=tmp_data+"}"
	tbl_web_get_fld_data_json=tmp_data
end function

function tbl_web_get_fld_data(index as word, num_of_fld as byte) as string
	dim j, k, x as byte
	dim fld_data as string
	dim tmp_data as string=""
	if num_of_fld=0 then
		tbl_web_get_fld_data=""
		exit function
	end if
	tbl_record_sg(index,EN_TBL_GET)
	tmp_data="\x22"+str(index)+"\x22,"
	for j = 0 to num_of_fld - 1
		tbl_field_sg(tbl_web_fields(j),fld_data,EN_TBL_GET)
		tmp_data=tmp_data+"\x22"
		fld_data = escape_string(fld_data)

		k = 1
		do
			x = instr(k, fld_data, "\x5c\x22",1)
			if x = 0 then
				x = len(fld_data) + 1
			end if
			tmp_data = tmp_data + mid(fld_data, k, x - k) + "\x22"
			k = x + 1
		loop while x <> len(fld_data) + 1
		if j<num_of_fld - 1 then
			tmp_data=tmp_data+","
		else
			tmp_data=tmp_data
		end if
	next j
	tbl_web_get_fld_data = tmp_data 
end function

sub tbl_web_get_rows(byref table as string)
	dim i as word
	dim j, num_of_fld as byte
	dim tbl_rows, tbl_rows_all as word
	dim tmp_data as string=""
	
	tbl_web_get_table_active_rows(table, tbl_rows, tbl_rows_all)
    
	num_of_fld = tbl_get_num_fields(table)
	tmp_data = tbl_web_get_header(table)+"\r\n"

    while sock.txfree < len(tmp_data)
        doevents
    wend
    sock.setdata(tmp_data)
    sock.send()

    for i = 1 to tbl_rows_all
        if tbl_rows_all=0 then
            exit for
        end if
        if tbl_is_record_deleted(i)<>YES then
			tmp_data=tbl_web_get_fld_data(i, num_of_fld)+"\r\n"
			while sock.txfree < len(tmp_data)
				doevents
			wend
			sock.setdata(tmp_data)
			sock.send()
			tmp_data=""
        end if
        
    next i
end sub

sub tbl_web_get_rows_by_offset(byref table as string, byref offset as word, byref count as word)
	dim i as word
	dim j, num_of_fld as byte
	dim tbl_rows, tbl_rows_all as word
	dim tmp_data as string=""
	
	tbl_web_get_table_active_rows(table, tbl_rows, tbl_rows_all)
    
	num_of_fld = tbl_get_num_fields(table)
	tmp_data = tbl_web_get_header(table)+"\r\n"

    while sock.txfree < len(tmp_data)
        doevents
    wend
    sock.setdata(tmp_data)
    sock.send()

    for i = offset to offset + count - 1
        if tbl_rows_all=0 then
            exit for
        end if
		if i > tbl_rows then
			exit sub
		end if
        if tbl_is_record_deleted(i)<>YES then
			tmp_data=tbl_web_get_fld_data(i, num_of_fld)+"\r\n"
			while sock.txfree < len(tmp_data)
				doevents
			wend
			sock.setdata(tmp_data)
			sock.send()
			tmp_data=""
        end if
        
    next i
	
	
end sub


function tbl_web_add_row(byref table as string,byref row as string) as string
'field1,field2,field3,etc.
	dim html_tbl as tbl_type
	dim field_metadata as tbl_field_type
	dim i, j, pos1, pos2, num_of_fld as byte
	dim ts as struct_tbl_timestamp
	dim s as string
	dim error as string(50)
	dim stemp as string(16)
    dim enclosed_in_quotes as no_yes=NO
    dim delimiter as string(1)=","
    dim enclosed_quote_offset as byte=0
	tbl_web_add_row=""

    if instr(1, row, "\x22", 1) = 1 and instr(len(row) - 2, row, "\x22", 1) <> 0 then
        enclosed_in_quotes=YES
        delimiter = "\x22,\x22"
        enclosed_quote_offset = 1
    end if

	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		num_of_fld = tbl_get_num_fields(table)
		pos1=1
		for i = 0 to num_of_fld-1
			s=""
			tbl_get_field_info(table,i,field_metadata)
'			if i>0 then
'				pos1=instr(pos1,row,",",i)
'			end if
			pos2=instr(pos1 + 1,row,delimiter,1)
            if enclosed_in_quotes=YES then
				while (instr(pos1,row,"\x5c\x22",1) > 0 and instr(pos1,row,"\x5c\x22",1) < instr(pos1 + 1,row,delimiter,1))
					or (num_of_fld = 1 and instr(pos1,row,"\x5c\x22",1) > 0)
					pos1 = pos1 + 1
					pos2=instr(pos1,row,"\x5c\x22",1)
					s = s + mid(row,pos1, pos2 - pos1) + "\x22"
					pos1 = pos2+1
					pos2=instr(pos1 + 1,row,delimiter,1)
				wend
			
				if pos2 = 0 then
					pos2 = len(row)
				end if
            end if
			s= s + mid(row,pos1+enclosed_quote_offset,pos2-pos1-enclosed_quote_offset)
			if s="" then 
				tbl_web_tbl_status = tbl_get_field_def(table,field_metadata.field_name,s)
				if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			end if
			tbl_web_tbl_status = tbl_field_sg(field_metadata.field_name,s,EN_TBL_SET)
			if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			pos1=pos2+1+enclosed_quote_offset
		next i
		
		tbl_web_tbl_status=tbl_record_add(stemp)
	end if
	
verify:
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_close(table)
	tbl_web_add_row=error
		
end function

function tbl_web_get_field_def(byref table_name_or_num as string, byref field_name as string) as string
	dim error as string=""
	dim def_value as string
	tbl_web_tbl_status=tbl_get_field_def(table_name_or_num, field_name, def_value)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		tbl_web_get_field_def=def_value
	else
		select case tbl_web_tbl_status
		case EN_TBL_STATUS_INVALID: 
			error="Field value invalid"
		case else
			error=str(tbl_web_tbl_status)
		end select
		tbl_web_get_field_def=error
	end if
end function

function tbl_web_delete_row(byref table as string,row as word) as string
	dim html_tbl as tbl_type
	dim ts as struct_tbl_timestamp
	dim error as string=""
	dim stemp as string(16)

	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		tbl_record_delete(row)
	end if
	

	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_close(table)
	tbl_web_delete_row=error
		
end function

function tbl_web_edit_row(byref table as string,byref index as word,byref row as string) as string
	'field1,field2,field3,etc.
	dim html_tbl as tbl_type
	dim field_metadata as tbl_field_type
	dim i, j, pos1, pos2, num_of_fld as byte
	dim ts as struct_tbl_timestamp
	dim s as string
	dim error as string(50)
	dim stemp as string(16)
    dim enclosed_in_quotes as no_yes=NO
    dim delimiter as string(1)=","
    dim enclosed_quote_offset as byte=0
	tbl_web_edit_row=""

    if instr(1, row, "\x22", 1) = 1 and instr(len(row) - 2, row, "\x22", 1) <> 0 then
        enclosed_in_quotes=YES
        delimiter = "\x22,\x22"
        enclosed_quote_offset = 1
    end if


	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		num_of_fld = tbl_get_num_fields(table)
		pos1=1
		tbl_record_sg(index,EN_TBL_GET)
		for i = 0 to num_of_fld-1
			s=""
			tbl_get_field_info(table,i,field_metadata)
'			if i>0 then
'				pos1=instr(pos1,row,",",i)
'			end if
			pos2=instr(pos1 + 1,row,delimiter,1)
            if enclosed_in_quotes=YES then
				while (instr(pos1,row,"\x5c\x22",1) > 0 and instr(pos1,row,"\x5c\x22",1) < instr(pos1 + 1,row,delimiter,1))
					or (num_of_fld = 1 and instr(pos1,row,"\x5c\x22",1) > 0)
					pos1 = pos1 + 1
					pos2=instr(pos1,row,"\x5c\x22",1)
					s = s + mid(row,pos1, pos2 - pos1) + "\x22"
					pos1 = pos2+1
					pos2=instr(pos1 + 1,row,delimiter,1)
				wend
			
				if pos2 = 0 then
					pos2 = len(row)
				end if
            end if
			s= s + mid(row,pos1+enclosed_quote_offset,pos2-pos1-enclosed_quote_offset)
			if s="" then 
				tbl_web_tbl_status = tbl_get_field_def(table,field_metadata.field_name,s)
				if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			end if
			tbl_web_tbl_status = tbl_field_sg(field_metadata.field_name,s,EN_TBL_SET)
			if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			pos1=pos2+1+enclosed_quote_offset
		next i
		tbl_web_tbl_status=tbl_record_edit(index)
	end if
    
	
verify:
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif		
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_close(table)
	tbl_web_edit_row=error
end function

function tbl_web_clear_table(byref table as string) as string
	dim error as string
	
	tbl_select(table, table)
	tbl_web_tbl_status=tbl_clear()
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		tbl_close(table)
	end if
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_web_clear_table=error

end function